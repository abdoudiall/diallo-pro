name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-3
  TF_VERSION: 1.11.2
  NODE_VERSION: 20
  BUCKET_NAME: diallo-pro
  DISTRIBUTION_ID: EMS4GAR97ZQY1  # ID fixe de la distribution CloudFront

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      # Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Cache Next.js build
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      # Install dependencies and build Next.js
      - name: Install dependencies
        run: npm ci

      - name: Build Next.js
        run: npm run build
        env:
          NODE_ENV: production

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Terraform format and initialize
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -recursive

      - name: Terraform Init
        working-directory: ./terraform/main
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform/main
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform/main
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./terraform/main
        run: terraform apply -auto-approve

      # Deploy to S3
      - name: Deploy to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          if [ -d "out" ]; then
            echo "Deploying static export from 'out' directory"
            aws s3 sync out/ s3://${{ env.BUCKET_NAME }}/ \
              --delete \
              --cache-control "public, max-age=31536000, immutable"
          else
            echo "ERROR: 'out' directory not found. Build may have failed."
            exit 1
          fi
          echo "Deployment to S3 completed successfully"

      # Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Invalidating CloudFront cache for distribution ${{ env.DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.DISTRIBUTION_ID }} \
            --paths "/*"
          echo "CloudFront invalidation initiated" 